{"version":3,"sources":["components/Header/index.tsx","models/news.ts","models/category.ts","models/comment.ts","models/publicNews.ts","models/publicComment.ts","services/category.ts","services/utils.ts","services/news.ts","services/comment.ts","services/file.ts","services/publicNews.ts","services/publicComment.ts","components/List/index.tsx","components/CommentList/index.tsx","components/SolidAvatar/index.tsx","container/Home/index.tsx","container/Admin/index.tsx","container/Detail/index.tsx","container/NewTopic/index.tsx","container/NewCate/index.tsx","container/Login/index.tsx","layouts/PrivateLayout/index.jsx","layouts/NotLoggedLayout/index.tsx","routes.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Header/ekseli.png"],"names":["withWebId","webId","logout","a","auth","localStorage","removeItem","window","location","href","origin","className","to","src","ekseliLogo","alt","overlay","Item","EditOutlined","ControlOutlined","onClick","LogoutOutlined","placement","Value","News","createdAt","updatedAt","SolidModel","timestamps","rdfContexts","schema","rdfsClasses","fields","name","FieldType","String","author","articleBody","category","filename","fileurl","Category","description","Comment","profile","source","newsUrl","commentUrl","datasets","list","from","all","data","map","item","getAttributes","create","values","Soukai","loadModels","useEngine","SolidEngine","SolidAuthClient","fetch","bind","at","getContainerUrl","path","url","URL","toString","currentSession","session","type","containerUrl","condition","sort","b","getTime","res","detail","iterator","remove","delete","CommentModel","created","Date","fileClient","upload","file","putFile","console","error","this","SolidFileClient","PublicNews","PublicComment","commentData","commentList","commentCount","filter","comment","length","List","state","newsList","current","getNews","props","setState","onPageChange","prevProps","prevState","keyword","filterList","indexOf","sliceList","slice","encodeURIComponent","key","count","style","backgroundColor","pageSize","defaultCurrent","total","onChange","marginTop","Component","TextArea","Input","CommentList","commentIn","getComment","commentContent","CommentService","push","val","onComment","message","success","avatar","content","datetime","title","moment","format","placeholder","rows","value","e","target","SolidAvatar","shape","flexShrink","TabPane","Tabs","Search","Home","cateList","getCateList","onChangeKeyword","enterButton","tabBarExtraContent","tab","cate","Admin","getList","onRemove","onConfirm","okText","cancelText","size","icon","DeleteOutlined","danger","Detail","qs","search","getDetail","news","PaperClipOutlined","color","withRouter","Option","Select","NewTopic","fileList","onSave","history","uid","status","File","tailLayout","wrapperCol","offset","span","uploadProps","beforeUpload","labelCol","initialValues","remember","onFinish","label","rules","required","width","showCount","UploadOutlined","htmlType","NewCate","Login","goLogin","selectedProvider","callbackUri","login","storage","log","display","justifyContent","alignItems","minHeight","LoginOutlined","withAuthorization","routes","rest","Fragment","component","route","RouteComponent","id","render","routerProps","exact","matchProps","routesList","Routes","NotLoggedLayout","App","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.e8a3cea9.chunk.js","sourcesContent":["/**\n * Header 组件用于页面 header 内容展示\n * - 用户状态\n * - 用户操作：新建 news、管理 news、退出登录\n */\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Menu, Dropdown } from \"antd\";\nimport { EditOutlined } from \"@ant-design/icons\";\nimport { ControlOutlined, LogoutOutlined } from \"@ant-design/icons\";\nimport auth from \"solid-auth-client\";\nimport { Value } from \"@solid/react\";\nimport { withWebId } from \"@inrupt/solid-react-components\";\nimport { SolidAvatar } from \"../../components\";\nimport ekseliLogo from \"./ekseli.png\";\nimport \"./index.less\";\n\nconst Header = ({ webId }) => {\n  const logout = async () => {\n    await auth.logout();\n    localStorage.removeItem(\"solid-auth-client\");\n    window.location.href = window.location.origin + \"/login\";\n  };\n\n  return (\n    <div className=\"header\">\n      <div className=\"header-content\">\n        <Link to=\"/\">\n          <img src={ekseliLogo} className=\"home-logo\" alt=\"\" />\n        </Link>\n\n        {webId && (\n          <div>\n            <Dropdown\n              overlay={\n                <Menu>\n                  <Menu.Item>\n                    <Link to=\"new\">\n                      <EditOutlined />\n                      Post News\n                    </Link>\n                  </Menu.Item>\n                  <Menu.Item>\n                    <Link to=\"/admin\">\n                      <ControlOutlined />\n                      Manage News\n                    </Link>\n                  </Menu.Item>\n                  <Menu.Item onClick={() => logout()}>\n                    <LogoutOutlined />\n                    Logout\n                  </Menu.Item>\n                </Menu>\n              }\n              placement=\"bottomLeft\"\n            >\n              <span className=\"header-user-info\">\n                <SolidAvatar src={webId}></SolidAvatar>\n                <span className=\"header-user-name\">\n                  {Value({ src: `[${webId}].name` })}\n                </span>\n              </span>\n            </Dropdown>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\nexport default withWebId(Header);\n","import { FieldType } from \"soukai\";\nimport { SolidModel } from \"soukai-solid\";\n\nexport default class News extends SolidModel {\n  public static timestamps = [\"createdAt\"];\n\n  public static rdfContexts = {\n    schema: \"https://schema.org/\",\n  };\n\n  public static rdfsClasses = [\"schema:Report\"];\n  public createdAt!: Date;\n  public updatedAt!: Date;\n  public static fields = {\n    name: FieldType.String,\n    author: FieldType.String,\n    articleBody: FieldType.String,\n    category: FieldType.String,\n    filename: FieldType.String,\n    fileurl: FieldType.String,\n  };\n}\n","import { FieldType } from \"soukai\";\nimport { SolidModel } from \"soukai-solid\";\n\nexport default class Category extends SolidModel {\n  public static timestamps = false;\n\n  public static rdfContexts = {\n    schema: \"https://schema.org/\",\n  };\n\n  public static rdfsClasses = [\"schema:CategoryCodeSet\"];\n\n  public static fields = {\n    name: FieldType.String,\n    description: FieldType.String,\n  };\n}\n","import { FieldType } from \"soukai\";\nimport { SolidModel } from \"soukai-solid\";\n\nexport default class Comment extends SolidModel {\n  public static timestamps = [\"createdAt\"];\n  public createdAt!: Date;\n  public updatedAt!: Date;\n\n  public static rdfContexts = {\n    schema: \"https://schema.org/\",\n  };\n\n  public static rdfsClasses = [\"schema:Comment\"];\n\n  public static fields = {\n    description: FieldType.String,\n    profile: FieldType.String,\n    source: FieldType.String,\n  };\n}\n","import { FieldType } from \"soukai\";\nimport { SolidModel } from \"soukai-solid\";\n\nexport default class News extends SolidModel {\n  public static timestamps = [\"createdAt\"];\n\n  public static rdfContexts = {\n    schema: \"https://schema.org/\",\n  };\n\n  public static rdfsClasses = [\"schema:Report\"];\n  public createdAt!: Date;\n  public updatedAt!: Date;\n  public static fields = {\n    name: FieldType.String,\n    author: FieldType.String,\n    newsUrl: FieldType.String,\n    category: FieldType.String,\n  };\n}\n","import { FieldType } from \"soukai\";\nimport { SolidModel } from \"soukai-solid\";\n\nexport default class Comment extends SolidModel {\n  public static timestamps = [\"createdAt\"];\n  public createdAt!: Date;\n  public updatedAt!: Date;\n\n  public static rdfContexts = {\n    schema: \"https://schema.org/\",\n  };\n\n  public static rdfsClasses = [\"schema:Comment\"];\n\n  public static fields = {\n    commentUrl: FieldType.String,\n    newsUrl: FieldType.String,\n  };\n}\n","import Soukai from \"soukai\";\nimport { Category } from \"../models\";\nimport { SolidEngine } from \"soukai-solid\";\nimport SolidAuthClient from \"solid-auth-client\";\n\nconst datasets = \"https://leeonfield.inrupt.net/category/\";\n\nclass Cate {\n  constructor() {\n    Soukai.loadModels({ Category });\n    Soukai.useEngine(\n      new SolidEngine(SolidAuthClient.fetch.bind(SolidAuthClient))\n    );\n    Category.at(datasets);\n  }\n  list = async (): Promise<any> => {\n    const list = await Category.from(datasets).all();\n    const data = list.map((item) => item.getAttributes());\n    return data;\n  };\n\n  create = async (values: { name: string; description: string }) => {\n    await Category.create(values);\n  };\n}\n\nexport default new Cate();\n","import SolidAuthClient from \"solid-auth-client\";\n\nasync function getContainerUrl(path: string, url?: string) {\n  if (url) {\n    return new URL(path, url).toString();\n  } else {\n    const session = await SolidAuthClient.currentSession();\n    return new URL(path, session.webId).toString();\n  }\n}\n\nexport { getContainerUrl };\n","import Soukai from \"soukai\";\nimport { News } from \"../models\";\nimport { SolidEngine } from \"soukai-solid\";\nimport SolidAuthClient from \"solid-auth-client\";\nimport { getContainerUrl } from \"./utils\";\n\nconst NEWS_PATH = \"/public/news/\";\n\nclass NewsService {\n  constructor() {\n    Soukai.loadModels({ News });\n    Soukai.useEngine(\n      new SolidEngine(SolidAuthClient.fetch.bind(SolidAuthClient))\n    );\n  }\n  list = async (type?: string): Promise<any> => {\n    let containerUrl = await getContainerUrl(NEWS_PATH);\n    let condition: {} = !type ? {} : { category: type };\n    const list = await News.from(containerUrl).all(condition);\n\n    const data = list\n      .map((item) => item.getAttributes())\n      .sort((a: any, b: any) => b.createdAt.getTime() - a.createdAt.getTime());\n    return data;\n  };\n\n  create = async (values: {\n    name: string;\n    author: string;\n    articleBody: string;\n  }) => {\n    let containerUrl = await getContainerUrl(NEWS_PATH);\n    let res = await News.at(containerUrl).create(values);\n    return res.getAttributes();\n  };\n  detail = async (url: string) => {\n    if (!url) return;\n    let containerUrl = await getContainerUrl(NEWS_PATH, url);\n    let list = await News.at(containerUrl).all();\n    for (const iterator of list) {\n      if (iterator.getAttributes().url === url) {\n        return iterator.getAttributes();\n      }\n    }\n    return {};\n  };\n  remove = async (url: string) => {\n    let containerUrl = await getContainerUrl(NEWS_PATH, url);\n    let list = await News.at(containerUrl).all();\n    for (const iterator of list) {\n      if (iterator.getAttributes().url === url) {\n        await iterator.delete();\n      }\n    }\n  };\n}\n\nexport default new NewsService();\n","import Soukai from \"soukai\";\nimport { Comment as CommentModel } from \"../models\";\nimport { SolidEngine } from \"soukai-solid\";\nimport SolidAuthClient from \"solid-auth-client\";\nimport { getContainerUrl } from \"./utils\";\n\nconst COMMENT_PATH = \"/public/comments/\";\n\nclass Comment {\n  constructor() {\n    Soukai.loadModels({ CommentModel });\n    Soukai.useEngine(\n      new SolidEngine(SolidAuthClient.fetch.bind(SolidAuthClient))\n    );\n  }\n  list = async (source: string): Promise<any> => {\n    return {};\n  };\n  detail = async (url: string) => {\n    if (!url) return;\n    let containerUrl = await getContainerUrl(COMMENT_PATH, url);\n    let list = await CommentModel.at(containerUrl).all();\n    for (const iterator of list) {\n      if (iterator.getAttributes().url === url) {\n        return iterator.getAttributes();\n      }\n    }\n    return {};\n  };\n  create = async (values: {\n    profile: string;\n    source: string;\n    description: string;\n  }) => {\n    let containerUrl = await getContainerUrl(COMMENT_PATH);\n\n    let res = await CommentModel.at(containerUrl).create({\n      ...values,\n      created: new Date(),\n    });\n    return res.getAttributes();\n  };\n}\n\nexport default new Comment();\n","import SolidAuthClient from \"solid-auth-client\";\nimport SolidFileClient from \"solid-file-client\";\nimport { getContainerUrl } from \"./utils\";\n\nclass File {\n  private fileClient;\n  constructor() {\n    this.fileClient = new SolidFileClient(SolidAuthClient);\n  }\n\n  upload = async (file: any, url?: string) => {\n    try {\n      let containerUrl = await getContainerUrl(\"/public/attachment/\");\n      const res = await this.fileClient.putFile(\n        url || `${containerUrl}${+new Date()}-${file.name}`,\n        file,\n        file.type\n      );\n      return res;\n    } catch (err) {\n      console.error(err);\n    }\n  };\n}\n\nexport default new File();\n","import Soukai from \"soukai\";\nimport { PublicComment, PublicNews } from \"../models\";\nimport { SolidEngine } from \"soukai-solid\";\nimport SolidAuthClient from \"solid-auth-client\";\n\nconst datasets = \"https://leeonfield.inrupt.net/newslist/\";\nconst commentSets = \"https://leeonfield.inrupt.netlist/\";\n\nclass PublicNewsService {\n  constructor() {\n    Soukai.loadModels({ PublicComment, PublicNews });\n    Soukai.useEngine(\n      new SolidEngine(SolidAuthClient.fetch.bind(SolidAuthClient))\n    );\n    PublicNews.at(datasets);\n    PublicComment.at(commentSets);\n  }\n\n  list = async (type?: string): Promise<any> => {\n    let condition: {} = !type ? {} : { category: type };\n    const res = await await PublicNews.from(datasets).all(condition);\n    const list = res.map((item) => item.getAttributes());\n    const commentData = await PublicComment.all();\n    const commentList = commentData.map((item) => item.getAttributes());\n\n    const data = list\n      .map((item) => {\n        let commentCount = commentList.filter(\n          (comment) => comment.newsUrl === item.newsUrl\n        ).length;\n        return {\n          commentCount,\n          ...item,\n        };\n      })\n      .sort((a: any, b: any) => b.createdAt.getTime() - a.createdAt.getTime());\n    return data;\n  };\n\n  create = async (values) => {\n    await PublicNews.create(values);\n  };\n\n  remove = async (url: string) => {\n    let list = await PublicNews.all();\n    for (const iterator of list) {\n      if (iterator.getAttributes().newsUrl === url) {\n        await iterator.delete();\n      }\n    }\n  };\n}\n\nexport default new PublicNewsService();\n","import Soukai from \"soukai\";\nimport { PublicComment } from \"../models\";\nimport { SolidEngine } from \"soukai-solid\";\nimport SolidAuthClient from \"solid-auth-client\";\n\nconst datasets = \"https://leeonfield.inrupt.net/commentslist/\";\n\nclass Cate {\n  constructor() {\n    Soukai.loadModels({ PublicComment });\n    Soukai.useEngine(\n      new SolidEngine(SolidAuthClient.fetch.bind(SolidAuthClient))\n    );\n    PublicComment.at(datasets);\n  }\n  list = async (newsUrl: string): Promise<any> => {\n    const list = await PublicComment.from(datasets).all({\n      newsUrl,\n    });\n    const data = list.map((item) => item.getAttributes());\n    return data;\n  };\n\n  create = async (values: { commentUrl: string; newsUrl: string }) => {\n    await PublicComment.create(values);\n  };\n}\n\nexport default new Cate();\n","/**\n * List 组件用户展示 news 列表\n */\nimport React, { Component } from \"react\";\nimport { Badge, Empty } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { PublicNews } from \"../../services\";\nimport { Value } from \"@solid/react\";\nimport { SolidAvatar } from \"../../components\";\nimport { Pagination } from \"antd\";\nimport \"./index.less\";\ninterface CompProps {\n  keyword: string;\n  type: string;\n}\ninterface CompState {\n  newsList: {\n    newsUrl: string;\n    name: string;\n    author: string;\n    category: string;\n    commentCount: number;\n  }[];\n  current: number;\n}\n\n// 该组件会传入 keyword 和 type 参数\n// keyword 用于用户搜索关键字筛选\n// type 用户分类切换\nclass List extends Component<CompProps, CompState> {\n  state: CompState = {\n    newsList: [],\n    current: 1,\n  };\n\n  getNews = async () => {\n    const { type } = this.props;\n    let newsList = await PublicNews.list(type === \"recent\" ? \"\" : type);\n    this.setState({\n      newsList,\n    });\n  };\n  componentDidMount() {\n    this.getNews();\n  }\n  onPageChange = (current) => {\n    this.setState({\n      current,\n    });\n  };\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.keyword !== prevProps.keyword) {\n      this.setState({\n        current: 1,\n      });\n    }\n  }\n\n  render() {\n    const { newsList, current } = this.state;\n    const { keyword = \"\" } = this.props;\n\n    const filterList = newsList.filter(\n      (item) => item.name.indexOf(keyword) > -1\n    );\n    const sliceList = filterList.slice((current - 1) * 10, current * 10);\n    return (\n      <div className=\"news-list\">\n        {sliceList.map((item) => (\n          <Link\n            to={`/detail?news=${encodeURIComponent(item.newsUrl)}`}\n            key={item.name}\n          >\n            <div className=\"news-item\">\n              <SolidAvatar src={item.author}></SolidAvatar>\n              <div className=\"news-content\">\n                <div className=\"desc\">{item.name}</div>\n                <div className=\"news-info\">\n                  <strong className=\"author\">\n                    <Value src={`[${item.author}].name`}></Value>\n                  </strong>\n                  {/* <div className=\"time\">May '19</div> */}\n                </div>\n              </div>\n              <Badge\n                className=\"site-badge-count-109\"\n                count={item.commentCount}\n                style={{ backgroundColor: \"#52c41a\" }}\n              />\n            </div>\n          </Link>\n        ))}\n        {filterList.length === 0 ? (\n          <Empty description=\"No news \" />\n        ) : (\n          <Pagination\n            pageSize={10}\n            defaultCurrent={current}\n            total={filterList.length}\n            onChange={this.onPageChange}\n            style={{\n              marginTop: 20,\n            }}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default List;\n","/**\n * 评论组件，用于详情页中评论内容展示\n * 由 评论列表 以及 评论区 两部分组成\n */\nimport React, { Component } from \"react\";\nimport { Comment, Tooltip, Input, Button, message } from \"antd\";\nimport { Comment as CommentService, PublicComment } from \"../../services\";\nimport { Value } from \"@solid/react\";\nimport { SolidAvatar } from \"../../components\";\nimport moment from \"moment\";\nimport \"./index.less\";\n\nconst { TextArea } = Input;\ninterface CompProps {\n  type: string;\n}\n// 组件参数包括 source 和 webId\n// source 是 news 的 url\n// webId 用户用户评论\nclass CommentList extends Component<{ source: string; webId: string }> {\n  state: {\n    commentList: {\n      url: string;\n      name: string;\n      profile: string;\n      source: string;\n      description: string;\n      createdAt: Date;\n    }[];\n    commentIn: string;\n  } = {\n    commentList: [],\n    commentIn: \"\",\n  };\n\n  // 获取评论内容\n  getComment = async () => {\n    const { source } = this.props;\n    let commentList = await PublicComment.list(source);\n\n    let commentContent: Array<any> = [];\n    for (const iterator of commentList) {\n      let data = await CommentService.detail(iterator.commentUrl);\n      commentContent.push(data);\n    }\n\n    this.setState({\n      commentList: commentContent,\n    });\n  };\n\n  componentDidMount() {\n    this.getComment();\n  }\n  onChange = (val) => {\n    this.setState({\n      commentIn: val,\n    });\n  };\n  // 发表评论\n  onComment = async () => {\n    const { commentIn } = this.state;\n    const { source, webId } = this.props;\n    const data = {\n      description: commentIn,\n      profile: webId,\n      source,\n    };\n    let res = await CommentService.create(data);\n\n    await PublicComment.create({\n      commentUrl: res.url,\n      newsUrl: source,\n    });\n\n    message.success(\"comment successfully\");\n    this.setState({\n      commentIn: \"\",\n    });\n\n    this.getComment();\n  };\n\n  render() {\n    const { commentList, commentIn } = this.state;\n    return (\n      <div className=\"comment-list\">\n        <div className=\"comment-header\">Comment</div>\n        <div className=\"comment-content\">\n          {commentList.map((item) => (\n            <Comment\n              key={item.url}\n              author={<Value src={`[${item.profile}].name`}></Value>}\n              avatar={<SolidAvatar src={item.profile} />}\n              content={<p>{item.description}</p>}\n              datetime={\n                <Tooltip\n                  title={moment(item.createdAt).format(\"YYYY-MM-DD HH:mm:ss\")}\n                >\n                  <span>\n                    {moment(item.createdAt).format(\"MM-DD  HH:mm:ss\")}\n                  </span>\n                </Tooltip>\n              }\n            />\n          ))}\n        </div>\n        <div className=\"comment-form\">\n          <TextArea\n            placeholder=\"leave your comment\"\n            rows={4}\n            value={commentIn}\n            onChange={(e) => this.onChange(e.target.value)}\n          />\n          <Button\n            className=\"submit-btn\"\n            onClick={() => this.onComment()}\n            type=\"primary\"\n          >\n            Add Comment\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CommentList;\n","// 该组件对于用户的头像进行了封装，可以通过用户 webid 返回头像组件\nimport React from \"react\";\nimport { Avatar } from \"antd\";\nimport { Value } from \"@solid/react\";\n\nconst SolidAvatar = (props) => {\n  return (\n    <Avatar\n      shape=\"square\"\n      style={{\n        flexShrink: 0,\n      }}\n      src={\n        props.src\n          ? Value({ src: `[${props.src}].vcard_hasPhoto` })\n          : \"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\"\n      }\n    />\n  );\n};\nexport default SolidAvatar;\n","/**\n * 服务首页\n * 功能包括：搜索、分类 tab、news list、news 分页\n */\nimport React, { Component } from \"react\";\nimport { Button, Tabs, Tooltip, Input, Badge } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { List } from \"../../components/\";\nimport { Category } from \"../../services\";\nimport \"./index.less\";\nconst { TabPane } = Tabs;\nconst { Search } = Input;\ninterface CompState {\n  cateList: { url: string; name: string; description: string }[];\n  keyword: string;\n}\n\nclass Home extends Component<{ webId: string }, CompState> {\n  state: CompState = {\n    cateList: [],\n    keyword: \"\",\n  };\n\n  // 获取分类列表\n  getCateList = async () => {\n    let cateList = await Category.list();\n    this.setState({\n      cateList,\n    });\n  };\n  // 分类 tab 切换回调函数\n  onChangeKeyword = (keyword) => {\n    this.setState({\n      keyword,\n    });\n  };\n\n  componentDidMount() {\n    this.getCateList();\n  }\n\n  render() {\n    const { cateList, keyword } = this.state;\n    return (\n      <div className=\"home-container\">\n        <div className=\"action-container\">\n          <Search\n            placeholder=\"search for news\"\n            onChange={(e) => this.onChangeKeyword(e.target.value)}\n            enterButton\n          />\n        </div>\n        <Tabs\n          onChange={() => {\n            this.onChangeKeyword(\"\");\n          }}\n          tabBarExtraContent={\n            <Tooltip title=\"Create new Category\">\n              <Link to=\"category\">\n                <Button type=\"text\">New</Button>\n              </Link>\n            </Tooltip>\n          }\n        >\n          <TabPane tab=\"Recent\">\n            <List keyword={keyword} type=\"recent\" />\n          </TabPane>\n          {cateList.map((cate) => (\n            <TabPane\n              tab={\n                cate.name === \"Finance\" ? (\n                  <Badge count={9}>\n                    <div className=\"tab-content\">{cate.name}</div>\n                  </Badge>\n                ) : (\n                  cate.name\n                )\n              }\n              key={cate.url}\n            >\n              <List keyword={keyword} type={cate.name} />\n            </TabPane>\n          ))}\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/**\n * 管理 news\n */\nimport React, { Component } from \"react\";\nimport { Button, message, Popconfirm } from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport { News, PublicNews } from \"../../services\";\nimport \"./index.less\";\ninterface CompState {\n  newsList: {\n    url: string;\n    name: string;\n    author: string;\n    articleBody: string;\n    category: string;\n  }[];\n}\nclass Admin extends Component<{}, CompState> {\n  state: CompState = {\n    newsList: [],\n  };\n  // 获取当前用户所有发表的 news\n  getList = async () => {\n    let newsList = await News.list();\n    this.setState({ newsList });\n  };\n  componentDidMount() {\n    this.getList();\n  }\n  // 删除对应的 news\n  onRemove = async (url) => {\n    await News.remove(url);\n    await PublicNews.remove(url);\n    message.success(\"delete successfully\");\n    this.getList();\n  };\n  render() {\n    const { newsList } = this.state;\n    return (\n      <div className=\"admin-container\">\n        {newsList.map((item) => (\n          <div className=\"news-item\" key={item.url}>\n            <div className=\"news-content\">{item.name}</div>\n            <Popconfirm\n              title=\"Confirm to delete this news ?\"\n              onConfirm={() => this.onRemove(item.url)}\n              okText=\"Yes\"\n              cancelText=\"No\"\n            >\n              <Button size=\"small\" icon={<DeleteOutlined />} danger type=\"text\">\n                Delete\n              </Button>\n            </Popconfirm>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default Admin;\n","/**\n * 详情页\n * 展示 news 详情\n */\nimport React, { Component } from \"react\";\nimport { Tag } from \"antd\";\nimport { CommentList } from \"../../components\";\nimport { withRouter } from \"react-router-dom\";\nimport { PaperClipOutlined } from \"@ant-design/icons\";\nimport { RouteComponentProps } from \"react-router\";\nimport moment from \"moment\";\nimport * as qs from \"query-string\";\nimport { News } from \"../../services\";\nimport { Value } from \"@solid/react\";\nimport \"./index.less\";\n\ninterface CompProps extends RouteComponentProps {\n  webId: string;\n}\ninterface CompState {\n  source: any;\n  detail: any;\n  author: string;\n}\n\nclass Detail extends Component<CompProps, CompState> {\n  state: CompState = {\n    source: qs.parse(window.location.search),\n    detail: {},\n    author: \"\",\n  };\n  // 获取 news 详情\n  getDetail = async () => {\n    const url: any = qs.parse(window.location.search).news;\n    const detail = await News.detail(url);\n    this.setState({\n      detail,\n    });\n  };\n\n  componentDidMount() {\n    this.getDetail();\n  }\n\n  render() {\n    const { source, detail } = this.state;\n    const { webId } = this.props;\n    const {\n      name,\n      articleBody,\n      category,\n      createdAt,\n      filename,\n      fileurl,\n      author,\n    } = detail;\n\n    return (\n      <div className=\"detail-container\">\n        <div className=\"detail-header\">\n          <h2 className=\"detail-title\">{name}</h2>\n          <div className=\"detail-info\">\n            <div className=\"info-item\">\n              {author && (\n                <span>\n                  Author: <Value src={`[${author}].name`}></Value>\n                </span>\n              )}\n              <span>{moment(createdAt).format(\"MM-DD HH:mm\")}</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"detail-content\">{articleBody}</div>\n\n        {filename && (\n          <div className=\"detail-attachment\">\n            <a href={fileurl} target=\"__blank\">\n              <PaperClipOutlined /> {filename}\n            </a>\n          </div>\n        )}\n\n        <Tag color=\"#87d068\">#{category}</Tag>\n\n        <CommentList webId={webId} source={source.news} />\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Detail);\n","/**\n * 新建 news\n * 包括选择分类、输入 title、news detail、上传附件\n */\nimport React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Form, Input, Button, Select, Upload, message } from \"antd\";\nimport { Category, News, File, PublicNews } from \"../../services\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport \"./index.less\";\nconst { Option } = Select;\n\ninterface CompState {\n  cateList: { url: string; name: string; description: string }[];\n  fileList: Array<any>;\n}\n\ninterface CompProps extends RouteComponentProps {\n  webId: string;\n}\n\nclass NewTopic extends Component<CompProps, CompState> {\n  state: CompState = {\n    cateList: [],\n    fileList: [],\n  };\n\n  // 保存 news\n  onSave = async (values) => {\n    const { webId } = this.props;\n    const { fileList } = this.state;\n    const { name: filename, url: fileurl } = fileList[0] || {\n      name: \"\",\n      url: \"\",\n    };\n    let data = {\n      ...values,\n      filename,\n      fileurl,\n      author: webId,\n    };\n\n    const res = await News.create(data);\n    const { name, category } = values;\n    await PublicNews.create({\n      name,\n      category,\n      author: webId,\n      newsUrl: res.url,\n    });\n    message.success(\"Add successfully !\");\n    this.props.history.push(\"/\");\n  };\n\n  // 获取分类列表\n  getCateList = async () => {\n    let cateList = await Category.list();\n    this.setState({\n      cateList,\n    });\n  };\n\n  componentDidMount() {\n    this.getCateList();\n  }\n\n  // 上传附件\n  upload = async (file) => {\n    this.setState({\n      fileList: [\n        {\n          uid: file.name,\n          name: file.name,\n          status: \"uploading\",\n        },\n      ],\n    });\n    let res = await File.upload(file);\n    let { url } = res;\n    if (url) {\n      this.setState({\n        fileList: [\n          {\n            uid: file.name,\n            name: file.name,\n            status: \"done\",\n            url,\n          },\n        ],\n      });\n    } else {\n      this.setState({\n        fileList: [],\n      });\n    }\n  };\n\n  render() {\n    const layout = {\n      labelCol: {\n        span: 4,\n      },\n      wrapperCol: {\n        span: 18,\n      },\n    };\n    const tailLayout = {\n      wrapperCol: {\n        offset: 8,\n        span: 16,\n      },\n    };\n\n    const uploadProps = {\n      name: \"file\",\n      beforeUpload: (file) => {\n        this.upload(file);\n        return false;\n      },\n    };\n    const { cateList, fileList } = this.state;\n    return (\n      <div className=\"create-news\">\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{\n            remember: true,\n          }}\n          onFinish={this.onSave}\n        >\n          <Form.Item\n            label=\"Category\"\n            name=\"category\"\n            rules={[\n              {\n                required: true,\n                message: \"Please select the category\",\n              },\n            ]}\n          >\n            <Select style={{ width: 120 }}>\n              {cateList.map((item) => (\n                <Option key={item.url} value={item.name}>\n                  {item.name}\n                </Option>\n              ))}\n            </Select>\n          </Form.Item>\n          <Form.Item\n            label=\"Title\"\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input the news title\",\n              },\n            ]}\n          >\n            <Input placeholder=\"news title\" />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Detail\"\n            name=\"articleBody\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input the news detail\",\n              },\n            ]}\n          >\n            <Input.TextArea showCount placeholder=\"news detail\" />\n          </Form.Item>\n\n          <Form.Item label=\"Attachment\" name=\"attachment\">\n            <Upload {...uploadProps} fileList={fileList}>\n              <Button icon={<UploadOutlined />}>Click to Upload</Button>\n            </Upload>\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Post Now\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(NewTopic);\n","/**\n * 新建分类页面\n */\nimport React, { Component } from \"react\";\nimport { Form, Input, Button, message } from \"antd\";\nimport { Category } from \"../../services\";\nimport { withRouter } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\nimport \"./index.less\";\n\nclass NewCate extends Component<RouteComponentProps> {\n  // 保存分类\n  onSave = async (values) => {\n    await Category.create(values);\n    message.success(\"save successfully !\");\n    this.props.history.push(\"/\");\n  };\n\n  render() {\n    const layout = {\n      labelCol: {\n        span: 4,\n      },\n      wrapperCol: {\n        span: 18,\n      },\n    };\n    const tailLayout = {\n      wrapperCol: {\n        offset: 8,\n        span: 16,\n      },\n    };\n    return (\n      <div className=\"create-news\">\n        <Form\n          {...layout}\n          name=\"basic\"\n          initialValues={{\n            remember: true,\n          }}\n          onFinish={this.onSave}\n        >\n          <Form.Item\n            label=\"Name\"\n            name=\"name\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input the news name\",\n              },\n            ]}\n          >\n            <Input placeholder=\"category name\" />\n          </Form.Item>\n\n          <Form.Item\n            label=\"Infomation\"\n            name=\"description\"\n            rules={[\n              {\n                required: true,\n                message: \"Please input the category detail\",\n              },\n            ]}\n          >\n            <Input.TextArea showCount placeholder=\"category detail\" />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Create Category Now\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(NewCate);\n","/**\n * 登录页面\n */\nimport React, { Component } from \"react\";\nimport auth from \"solid-auth-client\";\nimport { Button } from \"antd\";\nimport { LoginOutlined } from \"@ant-design/icons\";\nclass Login extends Component {\n  goLogin = async () => {\n    try {\n      const selectedProvider = \"https://inrupt.net/auth\";\n      let callbackUri = `${window.location.origin}/`;\n      const session = await auth.currentSession();\n      if (!session) {\n        localStorage.removeItem(\"solid-auth-client\");\n\n        await auth.login(selectedProvider, {\n          callbackUri,\n          storage: localStorage,\n        });\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  render() {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          minHeight: \"400px\",\n        }}\n      >\n        <Button\n          type=\"primary\"\n          onClick={() => this.goLogin()}\n          icon={<LoginOutlined />}\n        >\n          Login with inrupt.net\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default Login;\n","/**\n * 包裹登录后的页面以及路由\n */\nimport React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { withAuthorization } from \"@inrupt/solid-react-components\";\n\nconst PrivateLayout = ({ routes, webId, location, history, ...rest }) => {\n  return (\n    <React.Fragment>\n      <Route\n        {...rest}\n        component={() => (\n          <Switch>\n            {routes.map((route) => {\n              const { component: RouteComponent } = route;\n              return (\n                <Route\n                  key={route.id}\n                  path={route.path}\n                  render={(routerProps) => (\n                    <RouteComponent {...routerProps} webId={webId} />\n                  )}\n                  webId={webId}\n                  exact\n                />\n              );\n            })}\n            <Redirect to=\"/404\" />\n          </Switch>\n        )}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default withAuthorization(PrivateLayout);\n","/**\n * 包裹登录前的页面：登录页\n */\nimport React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { withWebId } from \"@inrupt/solid-react-components\";\n\nconst NotLoggedInLayout = (props) => {\n  const { component: Component, webId, ...rest } = props;\n  return !webId ? (\n    <Route\n      {...rest}\n      component={(matchProps) => <Component {...matchProps} />}\n    />\n  ) : (\n    <Redirect to=\"/\" />\n  );\n};\n\nexport default withWebId(NotLoggedInLayout);\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch } from \"react-router-dom\";\nimport { Detail, Home, NewTopic, Admin, NewCate, Login } from \"./container\";\nimport { PrivateLayout, NotLoggedLayout } from \"./layouts\";\nimport { Header } from \"./components\";\nconst routesList = [\n  {\n    id: \"detail\",\n    path: \"/detail\",\n    component: Detail,\n  },\n  {\n    id: \"new\",\n    path: \"/new\",\n    component: NewTopic,\n  },\n  {\n    id: \"category\",\n    path: \"/category\",\n    component: NewCate,\n  },\n  {\n    id: \"admin\",\n    path: \"/admin\",\n    component: Admin,\n  },\n  {\n    id: \"home\",\n    path: \"/\",\n    component: Home,\n  },\n];\n\nconst Routes = () => (\n  <Router>\n    <Header></Header>\n    <div className=\"wrapper\">\n      <Switch>\n        <NotLoggedLayout\n          component={Login}\n          path=\"/login\"\n          exact\n        ></NotLoggedLayout>\n        <PrivateLayout path=\"/\" routes={routesList}></PrivateLayout>\n      </Switch>\n    </div>\n  </Router>\n);\n\nexport default Routes;\n","import React, { FC } from \"react\";\nimport Route from \"./routes\";\nimport \"./App.less\";\n\nconst App: FC = () => (\n  <div className=\"root-container\">\n    <Route />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/ekseli.5ebe28f1.png\";"],"sourceRoot":""}